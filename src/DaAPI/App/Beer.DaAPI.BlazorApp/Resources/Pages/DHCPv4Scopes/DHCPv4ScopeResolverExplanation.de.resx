<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="DeviceBasedDHCPv4MacAddressResolver_DeviceBasedDHCPv4MacAddressResolver_Caption" xml:space="preserve">
    <value>Device Based Device Based MAC Address Resolver</value>
  </data>
  <data name="DeviceBasedDHCPv4MacAddressResolver_DeviceBasedDHCPv4MacAddressResolver_Content" xml:space="preserve">
    <value>Diese Zuordner prüft ob die MAC Addresse im Header des DHCPv4 Packets order aber die ClientIdentifier Option, mit dem des angebenen Gerätes übereinstimmt.</value>
  </data>
  <data name="DeviceBasedDHCPv4MacAddressResolver_DeviceId_Caption" xml:space="preserve">
    <value>Gerät</value>
  </data>
  <data name="DeviceBasedDHCPv4MacAddressResolver_DeviceId_Content" xml:space="preserve">
    <value>Wählen Sie ein Gerät aus der Liste aus. Geräte werden erstellt und verwaltet durch den Beer Gerätedienst.</value>
  </data>
  <data name="DeviceBasedDHCPv4MacAddressResolver_SearchClientIdenfifier_Caption" xml:space="preserve">
    <value>Prüfe auch die ClientIdentifier Option</value>
  </data>
  <data name="DeviceBasedDHCPv4MacAddressResolver_SearchClientIdenfifier_Content" xml:space="preserve">
    <value>Wenn dieser Wert aktiv ist und die MAC Adresse nicht bereits im Header gefunden wurde, wird auch die ClientIdentifierOption nach der entsprechenden MAC Adresse durchsucht.</value>
  </data>
  <data name="DeviceBasedDHCPv4SimpleCiscoSGSeriesResolver_DeviceBasedDHCPv4SimpleCiscoSGSeriesResolver_Caption" xml:space="preserve">
    <value>Gerätebasieter Cisco SG Switch</value>
  </data>
  <data name="DeviceBasedDHCPv4SimpleCiscoSGSeriesResolver_DeviceBasedDHCPv4SimpleCiscoSGSeriesResolver_Content" xml:space="preserve">
    <value>Dieser Zuordner kann verwendet werden, wenn  Cisco SG Switch wie die SG300 und SG350 Reihe mit aktivieren DHCP Snooping und Einfügen der Option 82 verwenden werden. Die Verknüpfung wird dabei über die VLAN ID und Port des Kunden, sowie die MAC Adresse des Gerätes hergestellt.</value>
  </data>
  <data name="DeviceBasedDHCPv4SimpleCiscoSGSeriesResolver_DeviceId_Caption" xml:space="preserve">
    <value>Gerät</value>
  </data>
  <data name="DeviceBasedDHCPv4SimpleCiscoSGSeriesResolver_DeviceId_Content" xml:space="preserve">
    <value>Wählen Sie ein Gerät aus der Liste aus. Geräte werden erstellt und verwaltet durch den Beer Gerätedienst.</value>
  </data>
  <data name="DeviceBasedDHCPv4SimpleCiscoSGSeriesResolver_PortNumber_Caption" xml:space="preserve">
    <value>Port</value>
  </data>
  <data name="DeviceBasedDHCPv4SimpleCiscoSGSeriesResolver_PortNumber_Content" xml:space="preserve">
    <value>Die Nummer des Port (1 ... 48) an dem der Kunde bzw. Nutzer angeschlossen ist.</value>
  </data>
  <data name="DeviceBasedDHCPv4SimpleCiscoSGSeriesResolver_VlanNumber_Caption" xml:space="preserve">
    <value>VLAN ID</value>
  </data>
  <data name="DeviceBasedDHCPv4SimpleCiscoSGSeriesResolver_VlanNumber_Content" xml:space="preserve">
    <value>Die VLAN ID des Kunden bzw. Benutzers für den dieser Zuordner gelten soll. Es kann jede ID zwischen 1 und 4094 angegeben werden.</value>
  </data>
  <data name="DeviceBasedDHCPv4SimpleZyxelIESResolver_DeviceBasedDHCPv4SimpleZyxelIESResolver_Caption" xml:space="preserve">
    <value>Gerätebasiertes Zyxel IES MSAN</value>
  </data>
  <data name="DeviceBasedDHCPv4SimpleZyxelIESResolver_DeviceId_Caption" xml:space="preserve">
    <value>Gerät</value>
  </data>
  <data name="DeviceBasedDHCPv4SimpleZyxelIESResolver_DeviceId_Content" xml:space="preserve">
    <value>Wählen Sie ein Gerät aus der Liste aus. Geräte werden erstellt und verwaltet durch den Beer Gerätedienst. </value>
  </data>
  <data name="DeviceBasedDHCPv4SimpleZyxelIESResolver_DHCPv4SimpleZyxelIESResolver_Content" xml:space="preserve">
    <value>Dieser Zuordner kann verwendet werden when ein  Zyxel MSAN der Reihen IES5x.. oder IES6x eingesetzt werden und diese als  "Layer2 relay agent" betrieben werden.  Der Resolver nimmt an, dass die Variable "%slotid/%pid" für die Einstellung "opt82-circuit-id" verwenden wird, sowie dass %dmac3 die Variable für die Einstellung "opt82-remote-id" ist. In der Dokumentation finden sich mehr über diese Einstellungen.</value>
  </data>
  <data name="DeviceBasedDHCPv4SimpleZyxelIESResolver_LinecardNumber_Caption" xml:space="preserve">
    <value>Linecard</value>
  </data>
  <data name="DeviceBasedDHCPv4SimpleZyxelIESResolver_LinecardNumber_Content" xml:space="preserve">
    <value>Die Nummer des Einschubs  (1 to 10) der mit dem entsprechend Port verbunden ist</value>
  </data>
  <data name="DeviceBasedDHCPv4SimpleZyxelIESResolver_PortNumber_Caption" xml:space="preserve">
    <value>Port</value>
  </data>
  <data name="DeviceBasedDHCPv4SimpleZyxelIESResolver_PortNumber_Content" xml:space="preserve">
    <value>Die Nummer des Ports (1 ... 80) mit dem Kunden verbunden wurde</value>
  </data>
  <data name="DHCPv4MacAddressResolver_DHCPv4MacAddressResolver_Caption" xml:space="preserve">
    <value>MAC Adress Zuordner</value>
  </data>
  <data name="DHCPv4MacAddressResolver_DHCPv4MacAddressResolver_Content" xml:space="preserve">
    <value>Diese Zuordner prüft ob die MAC Addresse im Header des DHCPv4 Packets order aber die ClientIdentifier Option, mit dem eingegeben Wert übereinstimmt.</value>
  </data>
  <data name="DHCPv4MacAddressResolver_MacAddress_Caption" xml:space="preserve">
    <value>MAC Adresse</value>
  </data>
  <data name="DHCPv4MacAddressResolver_MacAddress_Content" xml:space="preserve">
    <value>Die MAC Adresse die erwartet wird</value>
  </data>
  <data name="DHCPv4MacAddressResolver_SearchClientIdenfifier_Caption" xml:space="preserve">
    <value>Prüfe auch die ClientIdentifier Option</value>
  </data>
  <data name="DHCPv4MacAddressResolver_SearchClientIdenfifier_Content" xml:space="preserve">
    <value>Wenn dieser Wert aktiv ist und die MAC Adresse nicht bereits im Header gefunden wurde, wird auch die ClientIdentifierOption nach der entsprechenden MAC Adresse durchsucht.</value>
  </data>
  <data name="DHCPv4Option82Resolver_DHCPv4Option82Resolver_Caption" xml:space="preserve">
    <value>Benutzerdefinierte Option82</value>
  </data>
  <data name="DHCPv4Option82Resolver_DHCPv4Option82Resolver_Content" xml:space="preserve">
    <value>Dieser Zuordner kann verwendet werden, wenn eine spezielle Option82 zugeordnet werden soll.  Der Wert muss als Byte Sequenz eingegeben werden.</value>
  </data>
  <data name="DHCPv4Option82Resolver_Value_Caption" xml:space="preserve">
    <value>Wert</value>
  </data>
  <data name="DHCPv4Option82Resolver_Value_Content" xml:space="preserve">
    <value>Geben Sie hier den exakten erwarteten Wert der Option82 an ohne 0x or andere Zeichen</value>
  </data>
  <data name="DHCPv4PseudoResolver_DHCPv4PseudoResolver_Caption" xml:space="preserve">
    <value>Pseudo Zuordner</value>
  </data>
  <data name="DHCPv4PseudoResolver_DHCPv4PseudoResolver_Content" xml:space="preserve">
    <value>Der Pseudo-Zuordner wird immer als gültig betrachetet, egal für welches Paket. Er kann genutzt werden um Bereiche mit gleichen Eigenschaften zu gruppieren. Im Gegensatz zu anderen DHCP Servern, kann man bei DaAPI keine globalen Eigenschaften setzen. Stattdessen, kann ein Wurzelbereich erstellt werden. Werden diesem dann Kindbereiche zugeordnet, werden die Eigenschaften vererbt. Da der Pseudo-Zuordner immer wahr ist, können spezifischere Zuordner für Kindbereiche gewählt werden. Um mehr über das Konzept des Bereichtsbaum zu erfahren, lesen sie in der DaAPI documentation nach.</value>
  </data>
  <data name="DHCPv4RelayAgentResolver_AgentAddresses_Caption" xml:space="preserve">
    <value>Relay Agenten Adressen</value>
  </data>
  <data name="DHCPv4RelayAgentResolver_AgentAddresses_Content" xml:space="preserve">
    <value>Auflistung der IPv4 Adressen, die als gültiger Relayagent gesehen werden sollen. Es kann auch nur eine einzige Adresse angegeben werden.</value>
  </data>
  <data name="DHCPv4RelayAgentResolver_DHCPv4RelayAgentResolver_Caption" xml:space="preserve">
    <value>Relay Agenten</value>
  </data>
  <data name="DHCPv4RelayAgentResolver_DHCPv4RelayAgentResolver_Content" xml:space="preserve">
    <value>Dieser Zuordner prüft, ob das "Relay Agent Address" Feld im DHCPv4 Packet eines der gelistet Agenten entspricht</value>
  </data>
  <data name="DHCPv4RelayAgentSubnetResolver_DHCPv4RelayAgentSubnetResolver_Caption" xml:space="preserve">
    <value>Relay Agent Subnet </value>
  </data>
  <data name="DHCPv4RelayAgentSubnetResolver_DHCPv4RelayAgentSubnetResolver_Content" xml:space="preserve">
    <value>Dieser Zuordner prüft ob das "Relay Agent Address" Feld im DHCPv4 Packet einem Subnetz entspricht</value>
  </data>
  <data name="DHCPv4RelayAgentSubnetResolver_Mask_Caption" xml:space="preserve">
    <value>Subnetzmaske</value>
  </data>
  <data name="DHCPv4RelayAgentSubnetResolver_Mask_Content" xml:space="preserve">
    <value>Die Subnetzmaske (0... 32) des Netzes</value>
  </data>
  <data name="DHCPv4RelayAgentSubnetResolver_NetworkAddress_Caption" xml:space="preserve">
    <value>Netzaddresse</value>
  </data>
  <data name="DHCPv4RelayAgentSubnetResolver_NetworkAddress_Content" xml:space="preserve">
    <value>Die Adresse, die das Subnetz beschreibt.  Als Beispiel ist dies die 192.168.100.0/24 (ohne die Maske)</value>
  </data>
  <data name="DHCPv4SimpleCiscoSGSeriesResolver_DeviceMacAddress_Caption" xml:space="preserve">
    <value>Geräte MAC Address</value>
  </data>
  <data name="DHCPv4SimpleCiscoSGSeriesResolver_DeviceMacAddress_Content" xml:space="preserve">
    <value>Die MAC Adresse des Switches der SG Reihe, bei dem die Option 82 hinzugefügt wird. Hier ist nicht die MAC Adresse des Kunden bzw. Benutzers einzutragen.</value>
  </data>
  <data name="DHCPv4SimpleCiscoSGSeriesResolver_DHCPv4SimpleCiscoSGSeriesResolver_Caption" xml:space="preserve">
    <value>Cisco SG Switch</value>
  </data>
  <data name="DHCPv4SimpleCiscoSGSeriesResolver_DHCPv4SimpleCiscoSGSeriesResolver_Content" xml:space="preserve">
    <value>Dieser Zuordner kann verwendet werden, wenn  Cisco SG Switch wie die SG300 und SG350 Reihe mit aktivieren DHCP Snooping und Einfügen der Option 82 verwenden werden. Die Verknüpfung wird dabei über die VLAN ID und Port des Kunden, sowie die MAC Adresse des Gerätes hergestellt.</value>
  </data>
  <data name="DHCPv4SimpleCiscoSGSeriesResolver_PortNumber_Caption" xml:space="preserve">
    <value>Port</value>
  </data>
  <data name="DHCPv4SimpleCiscoSGSeriesResolver_PortNumber_Content" xml:space="preserve">
    <value>Die Nummer des Port (1 ... 48) an dem der Kunde bzw. Nutzer angeschlossen ist.</value>
  </data>
  <data name="DHCPv4SimpleCiscoSGSeriesResolver_VlanNumber_Caption" xml:space="preserve">
    <value>VLAN ID</value>
  </data>
  <data name="DHCPv4SimpleCiscoSGSeriesResolver_VlanNumber_Content" xml:space="preserve">
    <value>Die VLAN ID des Kunden bzw. Benutzers für den dieser Zuordner gelten soll. Es kann jede ID zwischen 1 und 4094 angegeben werden.</value>
  </data>
  <data name="DHCPv4SimpleZyxelIESResolver_DeviceMacAddress_Caption" xml:space="preserve">
    <value>Geräte MAC Address</value>
  </data>
  <data name="DHCPv4SimpleZyxelIESResolver_DeviceMacAddress_Content" xml:space="preserve">
    <value>Eingabe der MAC Adresse des Zyxel ohne 0x or ähnliches. Die MAC Adresse kann der Informationsseite entnommen werden.</value>
  </data>
  <data name="DHCPv4SimpleZyxelIESResolver_DHCPv4SimpleZyxelIESResolver_Caption" xml:space="preserve">
    <value>Zyxel IES MSAN</value>
  </data>
  <data name="DHCPv4SimpleZyxelIESResolver_DHCPv4SimpleZyxelIESResolver_Content" xml:space="preserve">
    <value>Dieser Zuordner kann verwendet werden when ein  Zyxel MSAN der Reihen IES5x.. oder IES6x eingesetzt werden und diese als  "Layer2 relay agent" betrieben werden.  Der Resolver nimmt an, dass die Variable "%slotid/%pid" für die Einstellung "opt82-circuit-id" verwenden wird, sowie dass %dmac3 die Variable für die Einstellung "opt82-remote-id" ist. In der Dokumentation finden sich mehr über diese Einstellungen.</value>
  </data>
  <data name="DHCPv4SimpleZyxelIESResolver_LinecardNumber_Caption" xml:space="preserve">
    <value>Linecard</value>
  </data>
  <data name="DHCPv4SimpleZyxelIESResolver_LinecardNumber_Content" xml:space="preserve">
    <value>Die Nummer des Einschubs  (1 to 10) der mit dem entsprechend Port verbunden ist</value>
  </data>
  <data name="DHCPv4SimpleZyxelIESResolver_PortNumber_Caption" xml:space="preserve">
    <value>Port</value>
  </data>
  <data name="DHCPv4SimpleZyxelIESResolver_PortNumber_Content" xml:space="preserve">
    <value>Die Nummer des Ports (1 ... 80) mit dem Kunden verbunden wurde</value>
  </data>
  <data name="NonUniqueDeviceBasedDHCPv4SimpleCiscoSGSeriesResolver_DeviceId_Caption" xml:space="preserve">
    <value>Gerät</value>
  </data>
  <data name="NonUniqueDeviceBasedDHCPv4SimpleCiscoSGSeriesResolver_DeviceId_Content" xml:space="preserve">
    <value>Wählen Sie ein Gerät aus der Liste aus. Geräte werden erstellt und verwaltet durch den Beer Gerätedienst.</value>
  </data>
  <data name="NonUniqueDeviceBasedDHCPv4SimpleCiscoSGSeriesResolver_NonUniqueDeviceBasedDHCPv4SimpleCiscoSGSeriesResolver_Caption" xml:space="preserve">
    <value>Gerätebasieter Cisco SG Switch mit nicht einzigartigen Option82 Werten</value>
  </data>
  <data name="NonUniqueDeviceBasedDHCPv4SimpleCiscoSGSeriesResolver_NonUniqueDeviceBasedDHCPv4SimpleCiscoSGSeriesResolver_Content" xml:space="preserve">
    <value>Dieser Zuordner kann verwendet werden, wenn  Cisco SG Switch wie die SG300 und SG350 Reihe mit aktivieren DHCP Snooping und Einfügen der Option 82 verwenden werden. Die Verknüpfung wird dabei über die VLAN ID und Port des Kunden, sowie die MAC Adresse des Gerätes hergestellt. Dieser Zuordner sollte verwendet werden, wenn mehrere Kunden sich eine Option82 teilen.</value>
  </data>
  <data name="NonUniqueDeviceBasedDHCPv4SimpleCiscoSGSeriesResolver_PortNumber_Caption" xml:space="preserve">
    <value>Port</value>
  </data>
  <data name="NonUniqueDeviceBasedDHCPv4SimpleCiscoSGSeriesResolver_PortNumber_Content" xml:space="preserve">
    <value>Die Nummer des Port (1 ... 48) an dem der Kunde bzw. Nutzer angeschlossen ist.</value>
  </data>
  <data name="NonUniqueDeviceBasedDHCPv4SimpleCiscoSGSeriesResolver_VlanNumber_Caption" xml:space="preserve">
    <value>VLAN ID</value>
  </data>
  <data name="NonUniqueDeviceBasedDHCPv4SimpleCiscoSGSeriesResolver_VlanNumber_Content" xml:space="preserve">
    <value>Die VLAN ID des Kunden bzw. Benutzers für den dieser Zuordner gelten soll. Es kann jede ID zwischen 1 und 4094 angegeben werden.</value>
  </data>
  <data name="PropertyCaption" xml:space="preserve">
    <value>Eigenschaft</value>
  </data>
  <data name="ResolverCaption" xml:space="preserve">
    <value>Zuordner</value>
  </data>
</root>