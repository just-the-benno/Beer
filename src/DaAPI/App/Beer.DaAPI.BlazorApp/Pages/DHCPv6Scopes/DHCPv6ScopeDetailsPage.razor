@page "/scopes/dhcpv6/details/{ScopeId}"

@using Humanizer

@attribute [Authorize]
@inject DaAPIService _service
@inject IStringLocalizer<DHCPv6ScopeDetailsPage> L
@inject NavigationManager _navManager
@inject ISnackbar _snackBarService

<BeerShowCircularLoadingIndicatorWhileNull Item="_properties" Text="@L["LoadingDetailsMessage"]">
    <MudText Typo="Typo.h4" Color="Color.Primary" Class="mb-4">@String.Format(L["PageTitle"], _properties.Name)</MudText>

    @if (_leases.Any() == false)
    {
        <MudAlert Severity="Severity.Info">@L["NoLeasesFound"]</MudAlert>
    }
    else
    {
        <MudText Typo="Typo.h5" Color="Color.Primary" Class="mb-4">@L["ActiveLeaseHeading"]</MudText>
        <MudGrid>
            @{ Int32 index = 0; }
            @foreach (var item in GetActiveLeases())
            {
                var temp = index++;
                <DHCPv6LeaseView Lease="item" ScopeId="@ScopeId" CancelLease="@( () => CancelLease(GetActiveLeases().ElementAt(temp)))" Class="pa-4 white-text light-green lighten-2" />
            }
        </MudGrid>
        <MudText Typo="Typo.h5" Color="Color.Primary" Class="my-4">@L["PendingLeaseHeading"]</MudText>
        <MudGrid>
            @{ Int32 index = 0; }
            @foreach (var item in GetPendingLeases())
            {
                var temp = index++;
                <DHCPv6LeaseView Lease="item" ScopeId="@ScopeId" CancelLease="@( () => CancelLease(GetPendingLeases().ElementAt(temp)))" Class="pa-4 white-text light-blue lighten-2" />
            }
        </MudGrid>
    }

    	<DaAPILeaseEventHistory ScopeId="Guid.Parse(ScopeId)" DisplayIPv6Packets="true"
							PacketRequestLoader="@( (id,response) => response == true ? _service.GetDHCPv6PacketResponse(id) :  _service.GetDHCPv6PacketRequest(id) )"
							FilterMethod="@_service.GetDHCPv6LeaseHistory" />

</BeerShowCircularLoadingIndicatorWhileNull>

@code {

}
