@implements IDisposable

@page "/pipelines/create"
@attribute [Authorize]
@inject DaAPIService _service
@inject NavigationManager _navigator
@inject IStringLocalizer<CreateNotificationPipelinePage> L
@inject ISnackbar snackBarService

<MudTabs @ref="_tabs" Elevation="2" Rounded="true" KeepPanelsAlive="true" ApplyEffectsToContainer="true" PanelClass="pa-6">
    <MudTabPanel Text="@L["GenerellPropertiesCaption"]">
        <EditForm EditContext="_generellPropertiesContext" OnValidSubmit="@( () =>  NavigateToStep(2))">
            <FluentValidator />
            <MudTextField T="string" Immediate="true" Placeholder="@L["PipelineNamePlaceholder"]" Label="@L["PipelineNameLabel"]" Variant="Variant.Outlined" InputType="InputType.Text" @bind-Value="_generellPropertiesModel.Name" For="@(() => _generellPropertiesModel.Name)" />
            <MudTextField Class="mt-6 mb-2" Lines="5" T="string" Immediate="true" Label="@L["PipelineDescriptionLabel"]" Placeholder="@L["PipelineDescriptionPlaceholder"]" Variant="Variant.Outlined" InputType="InputType.Text" @bind-Value="_generellPropertiesModel.Description" For="@(() => _generellPropertiesModel.Description)" />
            <div class="d-flex justify-end">
                <MudButton Class="mt-3" ButtonType="ButtonType.Submit" Color="Color.Primary" EndIcon="@Icons.Material.Filled.NavigateNext" Variant="Variant.Filled" Disabled="@(_generellPropertiesContext.GetValidationMessages().Any() == true)">@L["NextCaption"]</MudButton>
            </div>
        </EditForm>
    </MudTabPanel>

    <MudTabPanel Text="@L["TriggerCaption"]" Disabled="@(_generellPropertiesContext.GetValidationMessages().Any() == true)">
        <EditForm EditContext="_triggerContext" OnValidSubmit="@( () =>  NavigateToStep(3))">
            <FluentValidator />

            <BeerShowCircularLoadingIndicatorWhileNull Item="_pipelineDescriptions" Text="@L["LoadingText"]">
                <MudSelect Class="mt-6" T="String" Label="@L["TriggerLabel"]" For="@( () => _triggerPropertiesModel.TriggerName)" @bind-Value="_triggerPropertiesModel.TriggerName">
                    <MudSelectItem T="string" Value="@null">@L["TriggerNotSelectedLabel"]</MudSelectItem>
                    @foreach (var item in _pipelineDescriptions.MapperEnries)
                    {
                        <MudSelectItem T="string" Value="@item.TriggerName"><NotificationTriggerDisplay Typename="@item.TriggerName" /></MudSelectItem>
                    }
                </MudSelect>
            </BeerShowCircularLoadingIndicatorWhileNull>

            <div class="d-flex justify-end">
                <MudButton Class="mt-3 mr-3" ButtonType="ButtonType.Button" Color="Color.Default" StartIcon="@Icons.Material.Filled.NavigateBefore" Variant="Variant.Filled" OnClick="@( () =>  NavigateToStep(1))">@L["PreviousCaption"]</MudButton>
                <MudButton Class="mt-3" ButtonType="ButtonType.Submit" Color="Color.Primary" EndIcon="@Icons.Material.Filled.NavigateNext" Variant="Variant.Filled" Disabled="@(_triggerContext.GetValidationMessages().Any() == true)">@L["NextCaption"]</MudButton>
            </div>
        </EditForm>
    </MudTabPanel>

    <MudTabPanel Text="@L["ConditionCaption"]" Disabled="@(_triggerContext.GetValidationMessages().Any() == true)">
        <EditForm EditContext="_conditionContext" OnValidSubmit="@( () =>  NavigateToStep(4))">
            <FluentValidator />

            <MudSelect Class="mt-6" T="String" Label="@L["ConditionLabel"]" For="@( () => _conditionPropertiesModel.ConditionName)" @bind-Value="_conditionPropertiesModel.ConditionName">
                <MudSelectItem T="string" Value="@null">@L["ConditionNotSelectedLabel"]</MudSelectItem>
                @foreach (var item in PossibleCondtions)
                {
                    <MudSelectItem T="string" Value="@item"><NotificationConditionDisplay ContiditionName="@item" /></MudSelectItem>
                }
            </MudSelect>
            @if (_conditionPropertiesModel.Entries != null)
            {
                <MudSimpleTable Class="pa-4" Elevation="3" Hover="true">
                    <thead>
                        <tr>
                            <th>@L["ConditionPropertieNameHeading"]</th>
                            <th>@L["ConditionPropertieValueHeading"]</th>
                        </tr>
                    </thead>
                    <tbody>
                        @for (int i = 0; i < _conditionPropertiesModel.Entries.Count; i++)
                        {
                            var index = i;
                            var item = _conditionPropertiesModel.Entries[i];

                            <tr>
                                <td><NotificationCondititonDescriptionDisplay ConditionName="@_conditionPropertiesModel.ConditionName" PropertyName="@item.Name" /></td>
                                <td>
                                    @switch (item.Type)
                                    {
                                        case NotificationCondititonDescription.ConditionsPropertyTypes.Boolean:
                                            <MudCheckBox T="Boolean" @bind-Checked="_conditionPropertiesModel.Entries[index].ValueAsBoolean" For="@( () => _conditionPropertiesModel.Entries[index].ValueAsBoolean )" />
                                            break;
                                        case NotificationCondititonDescription.ConditionsPropertyTypes.DHCPv6ScopeList:
                                            <BeerShowCircularLoadingIndicatorWhileNull Item="_scopes" Text="@L["LoadingText"]">
                                                <div class="d-flex flex-column">
                                                    @for (int j = 0; j < _scopes.Count; j++)
                                                    {
                                                        var temp2 = j;

                                                        <MudCheckBox T="Boolean" Label="@_scopes[temp2].Name" @bind-Checked="_conditionPropertiesModel.Entries[index].Values[temp2].IsSelected" For="@( () => _conditionPropertiesModel.Entries[index].Values[temp2].IsSelected )" />
                                                    }
                                                    <ValidationMessage style="color: var(--mud-palette-error) !important;" For="@(() => _conditionPropertiesModel.Entries[index].Values)" />

                                                </div>
                                            </BeerShowCircularLoadingIndicatorWhileNull>
                                            break;
                                        default:
                                            break;
                                    }
                                </td>
                            </tr>
                        }

                    </tbody>
                </MudSimpleTable>
            }
            <div class="d-flex justify-end">
                <MudButton Class="mt-3 mr-3" ButtonType="ButtonType.Button" Color="Color.Default" StartIcon="@Icons.Material.Filled.NavigateBefore" Variant="Variant.Filled" OnClick="@( () =>  NavigateToStep(2))">@L["PreviousCaption"]</MudButton>
                <MudButton Class="mt-3" ButtonType="ButtonType.Submit" Color="Color.Primary" EndIcon="@Icons.Material.Filled.NavigateNext" Variant="Variant.Filled" Disabled="@(_conditionContext.GetValidationMessages().Any() == true)">@L["NextCaption"]</MudButton>
            </div>
        </EditForm>
    </MudTabPanel>

    <MudTabPanel Text="@L["ActorCaption"]" Disabled="@(_conditionContext.GetValidationMessages().Any() == true)">
        <EditForm EditContext="_actorContext" OnValidSubmit="CreatePipeline">
            <FluentValidator />

            <MudSelect Class="mt-6" T="String" Label="@L["ActorLabel"]" For="@( () => _actorPropertiesModel.ActorName)" @bind-Value="_actorPropertiesModel.ActorName">
                <MudSelectItem T="string" Value="@null">@L["ActorNotSelectedLabel"]</MudSelectItem>
                @foreach (var item in PossibleActors)
                {
                    <MudSelectItem T="string" Value="@item"><NotificationActorDisplay ActorName="@item" /> </MudSelectItem>
                }
            </MudSelect>

            @if (_actorPropertiesModel.Entries != null)
            {
                <MudSimpleTable Class="pa-4" Elevation="3" Hover="true">
                    <thead>
                        <tr>
                            <th>@L["ActorPropertieNameHeading"]</th>
                            <th>@L["ActorPropertieValueHeading"]</th>
                        </tr>
                    </thead>
                    <tbody>
                        @for (int i = 0; i < _actorPropertiesModel.Entries.Count; i++)
                        {
                            var index = i;
                            var item = _actorPropertiesModel.Entries[i];

                            <tr>
                                <td><NotificationActorPropertyDisplay ActorName="@_actorPropertiesModel.ActorName" PropertyName="@item.Name" /></td>
                                <td>
                                    @switch (item.Type)
                                    {
                                        case NotifcationActorDescription.ActorPropertyTypes.Endpoint:
                                        case NotifcationActorDescription.ActorPropertyTypes.Username:
                                        case NotifcationActorDescription.ActorPropertyTypes.Password:
                                            <MudTextField T="string" Immediate="true" Placeholder="@L["ActorGenerellValuePlaceholder"]" Variant="Variant.Outlined" InputType="@( item.Type == NotifcationActorDescription.ActorPropertyTypes.Password ? InputType.Password : InputType.Text)" @bind-Value="_actorPropertiesModel.Entries[index].Value" For="@(() => _actorPropertiesModel.Entries[index].Value)" />

                                            break;
                                        default:
                                            break;
                                    }
                                </td>
                            </tr>
                        }

                    </tbody>
                </MudSimpleTable>
            }

            <div class="d-flex justify-end">
                <MudButton Class="mt-3 mr-3" ButtonType="ButtonType.Button" Color="Color.Default" StartIcon="@Icons.Material.Filled.NavigateBefore" Variant="Variant.Filled" OnClick="@( () =>  NavigateToStep(2))">@L["PreviousCaption"]</MudButton>
                <BeerSendingAwareButton DefaultText="@L["CreateButtonCaption"]" InProgressText="@L["CreateInProgressButtonCaption"]" IsExecuting="_submitInProgress" Disabled="@(_actorContext.GetValidationMessages().Any() == true)" />
            </div>
        </EditForm>
    </MudTabPanel>
</MudTabs>