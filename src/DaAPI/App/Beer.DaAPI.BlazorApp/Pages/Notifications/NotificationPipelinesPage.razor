
@page "/pipelines"
@attribute [Authorize]
@inject DaAPIService service
@inject IStringLocalizer<NotificationPipelinesPage> L
@inject IDialogService _dialogService
@inject ISnackbar _snackbarService 

<MudText Typo="Typo.h5" Color="Color.Primary" Class="mb-4">@L["Headline"]</MudText>

<BeerShowCircularLoadingIndicatorWhileNull Item="_items" Text="@L["LoadingMessage"]">
    <div class="d-flex justify-end mr-3 mb-2">
        <MudTooltip Text="@L["NewPipelineButtonCaption"]">
            <MudFab Icon="@Icons.Material.Filled.Add" Link="/pipelines/create" Color="Color.Primary" />
        </MudTooltip>
    </div>

    @if (_items.Count == 0)
    {
        <MudAlert Severity="Severity.Info">@L["NoPipelinesFound"]</MudAlert>
    }
    else
    {
        <MudCard Elevation="25" Style="height:100%;">
            <MudCardContent Class="px-0">
                <MudSimpleTable Elevation="0" Hover="true">
                    <thead>
                        <tr>
                            <th>@L["TableHeaderName"]</th>
                            <th>@L["TableHeaderTrigger"]</th>
                            <th>@L["TableHeaderCondition"]</th>
                            <th>@L["TableHeaderActor"]</th>
                            <th></th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var item in _items)
                        {
                            <tr>
                                <td>@item.Name</td>
                                <td><NotificationTriggerDisplay Typename="@item.TrigerName" /></td>
                                <td><NotificationConditionDisplay ContiditionName="@item.ConditionName" /></td>
                                <td><NotificationActorDisplay ActorName="@item.ActorName" /></td>
                                <td>
                                    <MudTooltip Text="@L["DeleteButtonTooltip"]">
                                        <MudIconButton Icon="@Icons.Material.Filled.Delete" OnClick="@( () => ShowDeleteDialog(item))" Color="Color.Error" />
                                    </MudTooltip>
                                </td>
                            </tr>
                        }
                    </tbody>
                </MudSimpleTable>
            </MudCardContent>
        </MudCard>
    }

</BeerShowCircularLoadingIndicatorWhileNull>

@code {

    private ICollection<NotificationPipelineReadModel> _items;

    protected override async Task OnInitializedAsync()
    {
        _items = (await service.GetNotifactionPipelines())?.ToList();

        await base.OnInitializedAsync();
    }

    public async Task ShowDeleteDialog(NotificationPipelineReadModel item)
    {
        var parameters = new DialogParameters
            {
                { nameof(DeleteNotificationPipelineDialog.Entry), item }
            };

        var messageForm = _dialogService.Show<DeleteNotificationPipelineDialog>(String.Format(L["DeleteDialogTitle"], item.Name), parameters);
        var result = await messageForm.Result;

        if (result.IsSuccess() == true)
        {
            _snackbarService.Add(String.Format(L["DeletePipelineSucessContent"], item.Name), Severity.Success);
            _items.Remove(item);
            StateHasChanged();
        }
    }
}
