@inject IStringLocalizer<ChangeUserPasswordDialog> L
@inject IStringLocalizer<SharedRessources> LShared
@inject IBeerUserService _service
@inject ISnackbar _snackBar

<EditForm @ref="_form" Model="_model" OnSubmit="ChangePassword">
    <FluentValidator />
    <MudDialog>
        <DialogContent>
            <MudText Typo="Typo.body1" Class="mb-6">
                @(String.Format(L["ChangePasswordText"],User.LoginName))
            </MudText>
            @if (IsSelf == true)
            {
                <MudAlert Class="my-4" Severity="Severity.Warning">
                    @L["ChangeOwnPasswordMessage"]
                </MudAlert>
            }
            <MudGrid>
                <MudItem xs="12">
                    <MudTextField T="string" Immediate="true" Placeholder="@L["PasswordPlaceHolder"]" Label="@L["PasswordLabel"]" Variant="Variant.Outlined" InputType="InputType.Password" @bind-Value="_model.Password" For="@(() => _model.Password)" Disabled="_inProgress" />
                </MudItem>
                <MudItem xs="12">
                    <MudTextField T="string" Immediate="true" Placeholder="@L["PasswordConfirmationPlaceHolder"]" Label="@L["PasswordConfirmationLabel"]" Variant="Variant.Outlined" InputType="InputType.Password" @bind-Value="_model.PasswordConfirmation" For="@(() => _model.PasswordConfirmation)" Disabled="_inProgress" />
                </MudItem>
            </MudGrid>
        </DialogContent>
        <DialogActions>
            <MudButton ButtonType="ButtonType.Button" OnClick="Cancel">@LShared["CancelButtonCaption"]</MudButton>
            <SendingAwareButton DefaultText="@L["ChangePasswordButtonCaption"]" InProgressText="@L["ChaningPasswordButtonCaption"]" IsExecuting="_inProgress" />
        </DialogActions>
    </MudDialog>
</EditForm>

@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }

    private ResetUserPasswordViewModel _model = new();
    private Boolean _inProgress;
    private EditForm _form;

    [Parameter] public BeerUserOverview User { get; set; }

    [Parameter] public Boolean IsSelf { get; set; }


    private void Cancel() => MudDialog.Cancel();

    private async Task ChangePassword()
    {
        if (_form.EditContext.Validate() == false)
        {
            return;
        }

        _inProgress = true;
        Boolean result = await _service.ResetPassword(User.Id, _model.Password);
        if (result == true)
        {
            _snackBar.Add(String.Format(L["PasswordChangedSuccessMessage"], User.LoginName), Severity.Success);
            MudDialog.Close(DialogResult.Ok(true));
        }
        else
        {
            _snackBar.Add(String.Format(L["PasswordChangedFailedMessage"], User.LoginName), Severity.Error);
            _inProgress = false;
        }
    }

}