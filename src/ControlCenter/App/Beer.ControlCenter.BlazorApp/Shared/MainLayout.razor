@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication

@inherits LayoutComponentBase

@inject IStringLocalizer<SharedRessources> sharedLocalizer
@inject IControlCenterService ccService
@inject NavigationManager _navigationManager
@inject SignOutSessionStateManager SignOutManager

<MudThemeProvider Theme="@_default" />
<MudDialogProvider />
<MudSnackbarProvider />

<MudLayout>
    <MudAppBar Elevation="1">
        <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@((e) => DrawerToggle())" />
        <AuthorizeView>
            @if(_apps.Count > 0)
            { 
            <MudMenu Icon="@Icons.Material.Filled.ViewModule" Color="Color.Inherit" Direction="Direction.Bottom" OffsetY="true">
                @foreach (var item in _apps)
                {
                    <MudNavLink Href="@item.Url" IconColor="Color.Default" Target="_blank" Icon="@item.Icon">@item.Name</MudNavLink>
                }
            </MudMenu>
            }
        </AuthorizeView>
        <MudHidden Breakpoint="Breakpoint.SmAndUp" Invert="true">
            <MudText Typo="Typo.h5" Class="mudblazor-appbar-brand-text">@sharedLocalizer["AppName"]</MudText>
        </MudHidden>
        <MudSpacer />

        <MudMenu Icon="@Icons.Material.Filled.Person" Direction="Direction.Left" Color="Color.Inherit" OffsetX="true">
            <MudMenuItem OnClick="BeginSignOut">@sharedLocalizer["LogoutCaption"]</MudMenuItem>
        </MudMenu>

    </MudAppBar>

    <MudDrawer @bind-Open="_drawerOpen" Elevation="2" Class="flex-fill" Style="overflow:hidden">
        <MudDrawerHeader Class="pa-0 flex-min">
            <div class="d-flex flex-column align-center mt-4 flex-fill ">
                <div class="d-flex flex-row align-center ">
                    <MudIcon Size="Size.Large" Icon="fas fa-beer" />
                    <MudText Class="ml-3" Typo="Typo.h5">@sharedLocalizer["AppName"]</MudText>
                </div>
                <AuthorizeView>
                    <MudPaper Elevation="0" Class="my-4 pa-5 d-flex flex-column align-center align-self-stretch mud-theme-primary" Square="true">
                        <MudAvatar Size="Size.Large" Image="@GetClaimsValue(context.User, "picture")" />
                        <MudText Typo="Typo.h6">@GetClaimsValue(context.User, "preferred_username")</MudText>
                    </MudPaper>
                </AuthorizeView>

            </div>
        </MudDrawerHeader>

        <NavMenu AppEntries="_apps"  />

        <MudDivider />
        <MudGrid Class="flex-min px-3">
            <MudItem xs="4" Class="d-flex justify-center">
                <BeerIconButtonWithContent Icon="@Icons.Material.Filled.Message" Link="@UrlManager.MessageCenter">@sharedLocalizer["AppMenuMessageCaption"]</BeerIconButtonWithContent>
            </MudItem>
            <MudItem xs="4" Class="d-flex justify-center">
                <BeerIconButtonWithContent Icon="@Icons.Material.Filled.Settings" Link="@UrlManager.Settings">@sharedLocalizer["AppMenuSettingsCaption"]</BeerIconButtonWithContent>
            </MudItem>
            <MudItem xs="4" Class="d-flex justify-center">
                <BeerIconButtonWithContent Icon="@Icons.Material.Filled.Logout" OnClick="BeginSignOut">@sharedLocalizer["LogoutCaption"]</BeerIconButtonWithContent>
            </MudItem>
        </MudGrid>
    </MudDrawer>

    <MudMainContent>
        @Body
    </MudMainContent>
</MudLayout>

@code {
        bool _drawerOpen = true;

        private String GetClaimsValue(System.Security.Claims.ClaimsPrincipal principal, String type) =>
                principal.Claims.FirstOrDefault(x => x.Type == type)?.Value;

        private List<AppLinkEntry> _apps = new List<AppLinkEntry>();

        private MudTheme _default = new MudTheme
        {
            Palette = new Palette
            {
                Background = "#fafafa",
            },
        };

        void DrawerToggle()
        {
            _drawerOpen = !_drawerOpen;
        }

        private async Task BeginSignOut(MouseEventArgs args)
        {
            await SignOutManager.SetSignOutState();
            _navigationManager.NavigateTo("authentication/logout");
        }

        private IDictionary<String, String> _urls = new Dictionary<String, String>();

        protected async override Task OnInitializedAsync()
        {
            await base.OnInitializedAsync();
            _urls = await ccService.GetAppUrls();

            if (_urls.ContainsKey("DaAPI-Blazor"))
            {
                _apps.Add(new AppLinkEntry(_urls["DaAPI-Blazor"], "DaAPI", Icons.Material.Filled.AccountTree));
            }
            if (_urls.ContainsKey("Wiki"))
            {
                _apps.Add(new AppLinkEntry(_urls["Wiki"], "Wiki", Icons.Material.Filled.MenuBook));
            }
            if (_urls.ContainsKey("BeerShark-BlazorApp"))
            {
                _apps.Add(new AppLinkEntry(_urls["BeerShark-BlazorApp"], "BeerShark", "fas fa-highlighter"));
        }
}
}
